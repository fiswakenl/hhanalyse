import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
import ast
import json
import numpy as np

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="HR Analytics Dashboard", 
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
@st.cache_data
def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ parquet —Ñ–∞–π–ª–∞"""
    return pd.read_parquet('data/vacancies.parquet')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
CHART_CONFIG = {
    'company': {
        'title': '–¢–∏–ø—ã –∫–æ–º–ø–∞–Ω–∏–π',
        'chart_func': lambda df: create_single_field_chart(df, 'company_type', '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ —Ç–∏–ø–∞–º –∫–æ–º–ø–∞–Ω–∏–π'),
        'filter_field': 'company_type'
    },
    'domain': {
        'title': '–ë–∏–∑–Ω–µ—Å-–¥–æ–º–µ–Ω—ã', 
        'chart_func': lambda df: create_single_field_chart(df, 'business_domain', '–¢–æ–ø –±–∏–∑–Ω–µ—Å-–¥–æ–º–µ–Ω—ã', top_n=15),
        'filter_field': 'business_domain'
    },
    'skills': {
        'title': '–ù–∞–≤—ã–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
        'chart_func': lambda df: create_array_field_chart(df, 'key_skills', '–¢–æ–ø –Ω–∞–≤—ã–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', normalize_skill),
        'filter_field': 'key_skills'
    },
    'fe_framework': {
        'title': '–§—Ä–æ–Ω—Ç–µ–Ω–¥-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏',
        'chart_func': lambda df: create_array_field_chart(df, 'fe_framework', '–¢–æ–ø —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏'),
        'filter_field': 'fe_framework'
    },
    'state_mgmt': {
        'title': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º',
        'chart_func': lambda df: create_array_field_chart(df, 'state_mgmt', '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º'),
        'filter_field': 'state_mgmt'
    },
    'styling': {
        'title': '–°—Ç–∏–ª–∏–∑–∞—Ü–∏—è',
        'chart_func': lambda df: create_array_field_chart(df, 'styling', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏'),
        'filter_field': 'styling'
    },
    'testing': {
        'title': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
        'chart_func': lambda df: create_array_field_chart(df, 'testing', '–§—Ä–µ–π–º–≤–æ—Ä–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'),
        'filter_field': 'testing'
    },
    'api_proto': {
        'title': 'API –ø—Ä–æ—Ç–æ–∫–æ–ª—ã',
        'chart_func': lambda df: create_array_field_chart(df, 'api_proto', 'API –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –∏ —Ñ–æ—Ä–º–∞—Ç—ã'),
        'filter_field': 'api_proto'
    },
    'experience': {
        'title': '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã',
        'chart_func': lambda df: create_single_field_chart(df, 'experience_name', '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –æ–ø—ã—Ç–∞'),
        'filter_field': 'experience_name'
    },
    'employers': {
        'title': '–ö–æ–º–ø–∞–Ω–∏–∏',
        'chart_func': lambda df: create_single_field_chart(df, 'employer_name', '–¢–æ–ø –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–∞–∫–∞–Ω—Å–∏–π', top_n=20),
        'filter_field': 'employer_name'
    },
    'salary': {
        'title': '–ó–∞—Ä–ø–ª–∞—Ç—ã',
        'chart_func': lambda df: create_salary_experience_chart(df),
        'filter_field': None
    }
}

# –§–∏–ª—å—Ç—Ä—ã –¥–ª—è sidebar
FILTERS_CONFIG = [
    {'id': 'company-filter', 'label': '–¢–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏', 'field': 'company_type'},
    {'id': 'domain-filter', 'label': '–ë–∏–∑–Ω–µ—Å-–¥–æ–º–µ–Ω', 'field': 'business_domain'},
    {'id': 'experience-filter', 'label': '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã', 'field': 'experience_name'},
    {'id': 'employer-filter', 'label': '–ö–æ–º–ø–∞–Ω–∏—è', 'field': 'employer_name'},
    {'id': 'skills-filter', 'label': '–ù–∞–≤—ã–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'field': 'key_skills', 'type': 'array'},
    {'id': 'fe-framework-filter', 'label': '–§—Ä–æ–Ω—Ç–µ–Ω–¥-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏', 'field': 'fe_framework', 'type': 'array'},
    {'id': 'state-mgmt-filter', 'label': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º', 'field': 'state_mgmt', 'type': 'array'},
    {'id': 'styling-filter', 'label': '–°—Ç–∏–ª–∏–∑–∞—Ü–∏—è', 'field': 'styling', 'type': 'array'},
    {'id': 'testing-filter', 'label': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', 'field': 'testing', 'type': 'array'},
    {'id': 'api-proto-filter', 'label': 'API –ø—Ä–æ—Ç–æ–∫–æ–ª—ã', 'field': 'api_proto', 'type': 'array'}
]

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–∞—Å—Å–∏–≤–Ω—ã—Ö –ø–æ–ª–µ–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
def parse_array_field(array_data):
    """
    –ü–∞—Ä—Å–∏—Ç –º–∞—Å—Å–∏–≤—ã –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö:
    - numpy arrays
    - Python lists
    - JSON strings  
    - comma-separated strings
    - literal eval strings
    
    Args:
        array_data: –¥–∞–Ω–Ω—ã–µ –ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        
    Returns:
        list: —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    """
    if array_data is None:
        return []
    
    try:
        if pd.isna(array_data):
            return []
    except (TypeError, ValueError):
        pass
    
    try:
        if isinstance(array_data, np.ndarray):
            if array_data.size == 0:
                return []
            items = []
            for item in array_data:
                item_str = str(item).strip()
                if item_str and item_str != 'nan' and item_str != 'None':
                    items.append(item_str)
            return items
        
        if isinstance(array_data, (list, tuple)):
            items = []
            for item in array_data:
                item_str = str(item).strip()
                if item_str and item_str != 'nan' and item_str != 'None':
                    items.append(item_str)
            return items
        
        if isinstance(array_data, str):
            array_data = array_data.strip()
            
            if not array_data:
                return []
            
            if array_data.startswith('[') and array_data.endswith(']'):
                try:
                    parsed = json.loads(array_data)
                    if isinstance(parsed, list):
                        items = []
                        for item in parsed:
                            item_str = str(item).strip()
                            if item_str and item_str != 'nan' and item_str != 'None':
                                items.append(item_str)
                        return items
                except (json.JSONDecodeError, ValueError):
                    pass
                
                try:
                    parsed = ast.literal_eval(array_data)
                    if isinstance(parsed, list):
                        items = []
                        for item in parsed:
                            item_str = str(item).strip()
                            if item_str and item_str != 'nan' and item_str != 'None':
                                items.append(item_str)
                        return items
                except (SyntaxError, ValueError):
                    pass
            
            items = [s.strip() for s in array_data.split(',')]
            return [item for item in items if item]
        
        return [str(array_data).strip()] if str(array_data).strip() else []
        
    except Exception as e:
        print(f"Warning: Error parsing array data {array_data}: {e}")
        return []

# –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–≤—ã–∫–æ–≤
def normalize_skill(skill):
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞:
    - —É–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    - –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –µ–¥–∏–Ω–æ–º—É –Ω–∞–ø–∏—Å–∞–Ω–∏—é –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
    """
    if not skill or not isinstance(skill, str):
        return None
    
    skill = skill.strip()
    if not skill:
        return None
    
    skill_normalization = {
        'react': 'React',
        'reactjs': 'React', 
        'react.js': 'React',
        'javascript': 'JavaScript',
        'js': 'JavaScript',
        'typescript': 'TypeScript',
        'ts': 'TypeScript',
        'vue': 'Vue.js',
        'vuejs': 'Vue.js',
        'vue.js': 'Vue.js',
        'nodejs': 'Node.js',
        'node.js': 'Node.js',
        'node': 'Node.js',
        'nextjs': 'Next.js',
        'next.js': 'Next.js',
        'next': 'Next.js',
        'html5': 'HTML',
        'css3': 'CSS',
        'restapi': 'REST API',
        'rest api': 'REST API',
        'api': 'API',
        'github': 'Git',
    }
    
    skill_lower = skill.lower()
    return skill_normalization.get(skill_lower, skill)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞—Ä–ø–ª–∞—Ç –≤ —Ä—É–±–ª–∏
def normalize_salary(row):
    try:
        salary_from = row['salary_from'] 
        salary_to = row['salary_to']
        currency = row['salary_currency']
        is_gross = row['salary_gross']
        
        if pd.isna(salary_from) or salary_from <= 0:
            return pd.Series({'salary_from_rub': None, 'salary_to_rub': None})
        
        exchange_rates = {
            'RUR': 1,
            'USD': 95,
            'EUR': 105,
            'KZT': 0.2,
            'UZS': 0.0075,
            'BYR': 0.035,
            'UAH': 2.5,
            'KGS': 1.1,
            'AZN': 55
        }
        
        rate = exchange_rates.get(currency, 1) if pd.notna(currency) else 1
        
        salary_from_rub = float(salary_from * rate) if pd.notna(salary_from) and salary_from > 0 else None
        salary_to_rub = float(salary_to * rate) if pd.notna(salary_to) and salary_to > 0 else None
        
        if pd.notna(is_gross) and float(is_gross) == 1.0:
            if salary_from_rub:
                salary_from_rub = float(salary_from_rub * 0.87)
            if salary_to_rub:
                salary_to_rub = float(salary_to_rub * 0.87)
        
        if salary_from_rub and (salary_from_rub < 1000 or salary_from_rub > 10000000):
            salary_from_rub = None
        if salary_to_rub and (salary_to_rub < 1000 or salary_to_rub > 10000000):
            salary_to_rub = None
            
        return pd.Series({
            'salary_from_rub': salary_from_rub,
            'salary_to_rub': salary_to_rub
        })
    except Exception as e:
        return pd.Series({'salary_from_rub': None, 'salary_to_rub': None})

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –º–∞—Å—Å–∏–≤–Ω–æ–≥–æ –ø–æ–ª—è
def get_unique_array_values(df, field_name, limit=50):
    """–ü–æ–ª—É—á–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –º–∞—Å—Å–∏–≤–Ω–æ–≥–æ –ø–æ–ª—è"""
    if field_name not in df.columns:
        return []
    
    all_values = []
    for array_data in df[field_name].dropna():
        parsed_items = parse_array_field(array_data)
        all_values.extend(parsed_items)
    
    if not all_values:
        return []
    
    values_counts = pd.Series(all_values).value_counts()
    return values_counts.head(limit).index.tolist()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –æ–¥–∏–Ω–æ—á–Ω—ã–º –ø–æ–ª—è–º
def create_single_field_chart(filtered_df, field_name, title, top_n=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –æ–¥–∏–Ω–æ—á–Ω—ã–º –ø–æ–ª—è–º"""
    try:
        if field_name not in filtered_df.columns:
            return create_empty_chart(title, "–ü–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        field_counts = filtered_df[field_name].dropna().value_counts()
        if top_n:
            field_counts = field_counts.head(top_n)
        
        if len(field_counts) == 0:
            return create_empty_chart(title, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        fig = px.bar(
            x=field_counts.values,
            y=field_counts.index,
            orientation='h',
            title=title,
            labels={'x': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π', 'y': field_name.replace('_', ' ').title()}
        )
        
        fig.update_layout(height=500)
        return fig
        
    except Exception as e:
        print(f"Error in create_single_field_chart for {field_name}: {e}")
        return create_empty_chart(title, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É—Å—Ç—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
def create_empty_chart(title, message):
    """–°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
    fig = px.bar(x=[0], y=[message], orientation='h', title=title)
    fig.update_layout(height=500)
    return fig

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –º–∞—Å—Å–∏–≤–Ω—ã–º –ø–æ–ª—è–º
def create_array_field_chart(filtered_df, field_name, title, normalizer_func=None, top_n=50):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –º–∞—Å—Å–∏–≤–Ω—ã–º –ø–æ–ª—è–º.
    """
    try:
        if field_name not in filtered_df.columns:
            return create_empty_chart(title, "–ü–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        all_items = []
        
        for array_data in filtered_df[field_name]:
            parsed_items = parse_array_field(array_data)
            if normalizer_func:
                normalized_items = [normalizer_func(item) for item in parsed_items]
                valid_items = [item for item in normalized_items if item is not None and len(str(item)) > 1]
            else:
                valid_items = [item for item in parsed_items if item and len(str(item).strip()) > 1]
            all_items.extend(valid_items)
        
        if not all_items:
            return create_empty_chart(title, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        items_counts = pd.Series(all_items).value_counts().head(top_n)
        
        # –£–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–æ—Ç–µ –¥–ª—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        # min_frequency = max(1, len(filtered_df) // 200)
        # items_counts = items_counts[items_counts >= min_frequency]
        
        if len(items_counts) == 0:
            return create_empty_chart(title, "–°–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö")
        
        fig = px.bar(
            x=items_counts.values,
            y=items_counts.index,
            orientation='h',
            title=title,
            labels={'x': '–ß–∞—Å—Ç–æ—Ç–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è', 'y': '–≠–ª–µ–º–µ–Ω—Ç—ã'},
            color=items_counts.values,
            color_continuous_scale='viridis'
        )
        
        fig.update_layout(
            height=500,
            showlegend=False,
            xaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π",
            yaxis_title=field_name.replace('_', ' ').title(),
            font=dict(size=12)
        )
        
        return fig
        
    except Exception as e:
        print(f"Error in create_array_field_chart for {field_name}: {e}")
        return create_empty_chart(title, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞—Ä–ø–ª–∞—Ç –ø–æ –æ–ø—ã—Ç—É
def create_salary_experience_chart(filtered_df):
    try:
        valid_data = filtered_df[
            (filtered_df['salary_from_rub'].notna()) & 
            (filtered_df['experience_name'].notna()) &
            (filtered_df['experience_name'] != '')
        ]
        
        if len(valid_data) == 0:
            return create_empty_chart("–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ –æ–ø—ã—Ç—É —Ä–∞–±–æ—Ç—ã", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        salary_by_exp = valid_data.groupby('experience_name').agg({
            'salary_from_rub': 'mean',
            'salary_to_rub': 'mean'
        }).reset_index()
        
        fig = go.Figure()
        
        if not salary_by_exp['salary_from_rub'].isna().all():
            fig.add_trace(go.Bar(
                name='–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç',
                x=salary_by_exp['experience_name'],
                y=salary_by_exp['salary_from_rub'].fillna(0),
                yaxis='y',
                offsetgroup=1
            ))
        
        if not salary_by_exp['salary_to_rub'].isna().all():
            fig.add_trace(go.Bar(
                name='–ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ', 
                x=salary_by_exp['experience_name'],
                y=salary_by_exp['salary_to_rub'].fillna(0),
                yaxis='y',
                offsetgroup=2
            ))
        
        fig.update_layout(
            title="–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ –æ–ø—ã—Ç—É —Ä–∞–±–æ—Ç—ã",
            xaxis_title="–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã",
            yaxis_title="–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ (‚ÇΩ)",
            height=500,
            barmode='group'
        )
        
        return fig
    except Exception as e:
        print(f"Error in create_salary_experience_chart: {e}")
        return create_empty_chart("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", "–û—à–∏–±–∫–∞")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
def filter_data(df, filters):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –∫ DataFrame"""
    filtered_df = df.copy()
    
    for filter_key, filter_values in filters.items():
        if filter_values and len(filter_values) > 0:
            if filter_key in ['salary_from', 'salary_to']:
                continue
            
            # –ù–∞–π–¥–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ñ–∏–ª—å—Ç—Ä–∞
            filter_config = None
            for config in FILTERS_CONFIG:
                if config['field'] == filter_key:
                    filter_config = config
                    break
            
            if filter_config:
                if filter_config.get('type') == 'array':
                    filtered_df = filter_by_multiple_array_values(filtered_df, filter_key, filter_values)
                else:
                    filtered_df = filtered_df[filtered_df[filter_key].isin(filter_values)]
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –∑–∞—Ä–ø–ª–∞—Ç
    if 'salary_range' in filters and filters['salary_range']:
        min_salary, max_salary = filters['salary_range']
        # –í–∫–ª—é—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã –ò–õ–ò —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        salary_filter = (
            (filtered_df['salary_from_rub'].isna()) |
            ((filtered_df['salary_from_rub'].notna()) &
             (filtered_df['salary_from_rub'] >= min_salary) & 
             (filtered_df['salary_from_rub'] <= max_salary))
        )
        filtered_df = filtered_df[salary_filter]
    
    return filtered_df

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –≤ –º–∞—Å—Å–∏–≤–Ω–æ–º –ø–æ–ª–µ
def filter_by_multiple_array_values(df_to_filter, field_name, target_values):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç DataFrame –ø–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –≤ –º–∞—Å—Å–∏–≤–Ω–æ–º –ø–æ–ª–µ"""
    if not target_values or len(target_values) == 0 or field_name not in df_to_filter.columns:
        return df_to_filter
    
    mask = []
    for array_data in df_to_filter[field_name]:
        parsed_items = parse_array_field(array_data)
        has_match = any(value in parsed_items for value in target_values)
        mask.append(has_match)
    
    return df_to_filter[mask]

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df = load_data()
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –∑–∞—Ä–ø–ª–∞—Ç
    if 'salary_from_rub' not in df.columns or 'salary_to_rub' not in df.columns:
        df[['salary_from_rub', 'salary_to_rub']] = df.apply(normalize_salary, axis=1)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞ –∑–∞—Ä–ø–ª–∞—Ç
    salary_data = df['salary_from_rub'].dropna()
    if len(salary_data) > 0:
        SALARY_MIN = max(0, int(salary_data.min()))
        SALARY_MAX = int(salary_data.max())
    else:
        SALARY_MIN = 0
        SALARY_MAX = 1000000
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    st.sidebar.header("üîç –§–∏–ª—å—Ç—Ä—ã")
    
    filters = {}
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    for filter_config in FILTERS_CONFIG:
        field = filter_config['field']
        label = filter_config['label']
        filter_type = filter_config.get('type', 'single')
        
        st.sidebar.subheader(label)
        
        if filter_type == 'array':
            # –î–ª—è –º–∞—Å—Å–∏–≤–Ω—ã—Ö –ø–æ–ª–µ–π –ø–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            options = get_unique_array_values(df, field, limit=30)
            if options:
                selected = st.sidebar.multiselect(
                    f"–í—ã–±–µ—Ä–∏—Ç–µ {label.lower()}:",
                    options=options,
                    key=f"{field}_filter"
                )
                filters[field] = selected
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π
            unique_values = df[field].dropna().unique().tolist()[:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if unique_values:
                selected = st.sidebar.multiselect(
                    f"–í—ã–±–µ—Ä–∏—Ç–µ {label.lower()}:",
                    options=sorted(unique_values),
                    key=f"{field}_filter"
                )
                filters[field] = selected
    
    # –§–∏–ª—å—Ç—Ä –∑–∞—Ä–ø–ª–∞—Ç
    st.sidebar.subheader("üí∞ –î–∏–∞–ø–∞–∑–æ–Ω –∑–∞—Ä–ø–ª–∞—Ç (‚ÇΩ)")
    salary_range = st.sidebar.slider(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω:",
        min_value=SALARY_MIN,
        max_value=SALARY_MAX,
        value=(SALARY_MIN, SALARY_MAX),
        format="%d"
    )
    filters['salary_range'] = salary_range
    
    # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if st.sidebar.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã"):
        st.rerun()
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    filtered_df = filter_data(df, filters)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    st.sidebar.markdown("---")
    st.sidebar.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    st.sidebar.metric("–í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π", len(df))
    st.sidebar.metric("–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ", len(filtered_df))
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º
    salary_data = filtered_df['salary_from_rub'].dropna()
    if len(salary_data) > 0:
        avg_salary = salary_data.mean()
        median_salary = salary_data.median()
        st.sidebar.metric("–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞", f"{avg_salary:,.0f} ‚ÇΩ")
        st.sidebar.metric("–ú–µ–¥–∏–∞–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞", f"{median_salary:,.0f} ‚ÇΩ")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - —Å–∏—Å—Ç–µ–º–∞ —Ç–∞–±–æ–≤
    tab_names = [config['title'] for config in CHART_CONFIG.values()]
    tabs = st.tabs(tab_names)
    
    for i, (key, config) in enumerate(CHART_CONFIG.items()):
        with tabs[i]:
            try:
                chart = config['chart_func'](filtered_df)
                st.plotly_chart(chart, use_container_width=True)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
                st.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")

if __name__ == "__main__":
    main()